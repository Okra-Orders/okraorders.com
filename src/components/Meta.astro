---
// import { getImage } from "astro:assets"; // Removed unused import
// import type { ImageMetadata } from "astro"; // Removed unused import
import { OG, SEO, SITE } from "@data/constants";
// import type { StructuredData } from "@/types/structuredData.interface"; // Removed potentially problematic import

// Default properties for the Meta component. These values are used if props are not provided.
// 'meta' sets a default description meta tag to describe the page content.
// 'structuredData' defines default structured data in JSON-LD format to enhance search engine understanding of the page (for SEO purposes).
const defaultProps = {
  meta: SITE.description,
  structuredData: SEO.structuredData,
};

// Extract props with default values assigned from defaultProps. Values can be overridden when the component is used.
// For example:
// <MainLayout title="Custom Title" meta="Custom description." />
const {
  meta = defaultProps.meta,
  structuredData = defaultProps.structuredData,
} = Astro.props;

// Define the metadata for your website and individual pages
const URL = `${Astro.site}`; // Set the website URL in astro.config.mjs
const author = SITE.author;
const canonical = Astro.url.href;
const ogTitle = OG.title;
const ogDescription = OG.description;

// Use OG image details directly from constants.ts
const socialImageURL = OG.image.url.startsWith('/') 
  ? `${Astro.url.origin}${OG.image.url}` 
  : OG.image.url; // Construct full URL if path is relative
const socialImageWidth = OG.image.width;
const socialImageHeight = OG.image.height;
const socialImageAlt = OG.image.alt;

const languages: { [key: string]: string } = {
  en: "",
  // fr: "fr", // Assuming only English for now
};

function createHref(prefix: string, path: string): string {
  const siteUrl = SITE.url.replace(/\/$/, "");
  const pagePath = path.replace(/^\/|\/$/g, "");
  return `${siteUrl}/${prefix ? prefix + '/' : ''}${pagePath}`.replace(/\/$/, ''); // Added check for empty prefix and trailing slash removal
}

const fullPath: string = Astro.url.pathname;

const alternateLanguageLinks: string = Object.entries(languages)
  .map(([lang, prefix]: [string, string]) => {
    const basePath: string =
      lang === "en" ? fullPath.replace(/^\/fr\//, "/") : fullPath;

    const href: string = createHref(prefix, basePath);

    return `<link rel="alternate" hreflang="${lang}" href="${href}" />`;
  })
  .join("\n");

// Removed getImage calls for non-existent favicons
// const faviconSvg = await getImage({ ... });
// const appleTouchIcon = await getImage({ ... });
---

<!-- Inject structured data into the page if provided. This data is formatted as JSON-LD, a method recommended by Google for structured data pass:
     https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data -->
<script define:vars={{ structuredData }} is:inline>
  const script = document.createElement('script');
  script.type = 'application/ld+json';
  script.textContent = JSON.stringify(structuredData);
  document.head.appendChild(script);
</script>

<!-- Define the character set, description, author, and viewport settings -->
<meta charset="utf-8" />
<meta content={meta} name="description" />
<meta name="web_author" content={author} />
<meta
  name="viewport"
  content="width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0"
/>
<meta http-equiv="X-UA-Compatible" content="ie=edge" />
<link rel="canonical" href={canonical} />
<Fragment set:html={alternateLanguageLinks} />

<!-- Facebook Meta Tags -->
<meta property="og:locale" content="en_US" />
<meta property="og:url" content={URL} />
<meta property="og:type" content="website" />
<meta property="og:title" content={ogTitle} />
<meta property="og:site_name" content={SITE.title} />
<meta property="og:description" content={ogDescription} />
<meta property="og:image" content={socialImageURL} />
<meta content={socialImageWidth.toString()} property="og:image:width" />
<meta content={socialImageHeight.toString()} property="og:image:height" />
<meta content={socialImageAlt} property="og:image:alt" />
<meta content="image/png" property="og:image:type" />

<!-- Twitter Meta Tags -->
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:domain" content={URL} />
<meta property="twitter:url" content={URL} />
<meta name="twitter:title" content={ogTitle} />
<meta name="twitter:description" content={ogDescription} />
<meta name="twitter:image" content={socialImageURL} />
<meta name="twitter:image:alt" content={socialImageAlt} />

<!-- Links to the webmanifest and sitemap -->
<link rel="manifest" href="/manifest.json" />
<!-- https://docs.astro.build/en/guides/integrations-guide/sitemap/ -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Links for favicons -->
<link href="/favicon.ico" rel="icon" sizes="any" type="image/x-icon" />
<link href="/favicon-16x16.png" rel="icon" sizes="16x16" type="image/png" />
<link href="/favicon-32x32.png" rel="icon" sizes="32x32" type="image/png" />
{/* Removed links for generated SVG and Apple Touch icons */}
{/* <link href={faviconSvg.src} rel="icon" type="image/svg+xml" sizes="any" /> */}
<meta name="mobile-web-app-capable" content="yes" />
{/* <link href={appleTouchIcon.src} rel="apple-touch-icon" /> */}
{/* <link href={appleTouchIcon.src} rel="shortcut icon" /> */}

<!-- Set theme color -->
<meta name="theme-color" content="#facc15" />
