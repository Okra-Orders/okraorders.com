---

import { Image } from "astro:assets";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
import type { ImageMetadata } from 'astro';

// Define props from Astro
const {
  title,
  subTitle,
  primaryBtn,
  primaryBtnURL,
  secondaryBtn,
  secondaryBtnURL,
  imgSrc,
  imgAlt,
  minHeight = "min-h-[300px] md:min-h-[400px]", // Default minimum height
  textContrastColor = "text-black", // Default text color for contrast
  textShadow = "text-shadow-md", // Default subtle text shadow
  backgroundPosition = "object-center", // Default background position
} = Astro.props;

// Determine responsive shadow classes
let responsiveTextShadowClasses: string;
if (textShadow === "text-shadow-none") {
  responsiveTextShadowClasses = "text-shadow-none";
} else if (textShadow === "text-shadow-md") {
  responsiveTextShadowClasses = "text-shadow-lg md:text-shadow-md lg:text-shadow-lg";
} else if (textShadow === "text-shadow-lg") {
  responsiveTextShadowClasses = "text-shadow-lg";
} else {
  // Fallback for unexpected textShadow values: apply stronger mobile shadow, respect prop for desktop, stronger for lg
  responsiveTextShadowClasses = `text-shadow-lg md:${textShadow} lg:text-shadow-lg`;
}

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  imgSrc: ImageMetadata; // Image source is REQUIRED
  imgAlt: string; // Alt text is REQUIRED
  minHeight?: string; // Optional min height for the section, e.g., "min-h-[500px]"
  textContrastColor?: string; // Optional class for text color, e.g., "text-neutral-800"
  textShadow?: string; // Optional class for text shadow, e.g., "text-shadow-none" or "text-shadow-lg"
  backgroundPosition?: string; // Optional class for background image position, e.g., "object-top"
}
---

<style>
  /* Simple text-shadow utility if not using a Tailwind plugin */
  .text-shadow-md {
    text-shadow: 0 0px 3px rgba(255, 255, 255, 1);
  }
  .text-shadow-lg {
    text-shadow: 0 0px 3px rgba(255, 255, 255, 1);
  }
   .text-shadow-none {
    text-shadow: none;
  }
</style>

<section
  class:list={[
    "relative overflow-hidden rounded-b-2xl",
    minHeight, // Apply minimum height
    "flex items-center justify-start" // Align content to the start (left)
  ]}
>
  <!-- Background Image -->
  <Image
    src={imgSrc}
    alt={imgAlt}
    class:list={[
      "absolute inset-0 h-full w-full object-cover -z-10 opacity-70 md:opacity-100",
      backgroundPosition // Apply background position
    ]}
    loading="eager"
    widths={[640, 768, 1024, 1280, 1536]}
    sizes="100vw"
    draggable={false}
  />

  <!-- Content Overlay -->
  <div class:list={["relative z-10 px-12 py-12 pb-8 md:py-16 text-left w-full md:w-1/2", textContrastColor, responsiveTextShadowClasses]}>
    <!-- Title -->
    <h1
      class="block text-balance text-3xl font-bold tracking-tight sm:text-4xl lg:text-5xl lg:leading-tight"
      set:html={title}
    />

    <!-- Subtitle -->
    {subTitle &&
      <p class="mt-4 text-pretty text-lg lg:w-3/4">
        {subTitle}
      </p>
    }

    <!-- Action Buttons -->
    <div class="mt-8 grid w-full gap-3 sm:inline-flex justify-start">
      {primaryBtn &&
        <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />
      }
      {secondaryBtn &&
        <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
      }
    </div>
  </div>
</section>
