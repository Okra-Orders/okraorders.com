---
// Import the necessary dependencies
import { Image } from "astro:assets";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
import ReviewComponent from "@components/ui/blocks/ReviewComponent.astro";
import type { ImageMetadata } from 'astro';
// Remove default image import - image must be passed via props
// import defaultHeroImage from "@/images/okra-hero-homepage.png"; 

// Define props from Astro
const {
  title,
  subTitle,
  primaryBtn,
  primaryBtnURL,
  secondaryBtn,
  secondaryBtnURL,
  withReview,
  avatars,
  starCount,
  rating,
  reviews,
  src, 
  alt,
  imgWidth = 800, // Default width if not provided
  imgHeight = 600, // Default height if not provided
  // Styling props
  imageScale = "scale-100", 
  rightOffset = "right-0", 
  minSectionHeight = "", // Optional min height for the whole section
  // Background props
  backgroundColor = "bg-green-50", // Default solid background color
  gradientFromColor, 
  gradientToColor,
  backgroundImageURL,
} = Astro.props;

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  withReview?: boolean;
  avatars?: Array<string>;
  starCount?: number;
  rating?: string;
  reviews?: string;
  src: ImageMetadata; // Image source is REQUIRED
  alt: string; // Alt text is REQUIRED
  imgWidth?: number; // Optional width prop
  imgHeight?: number; // Optional height prop
  // Styling props
  imageScale?: string; // e.g., "scale-100", "scale-125"
  rightOffset?: string; // e.g., "right-0", "right-[-2rem]"
  minSectionHeight?: string; // e.g., "min-h-[600px]"
  // Background props
  backgroundColor?: string; // Optional solid color class
  gradientFromColor?: string; // Optional gradient start color class
  gradientToColor?: string; // Optional gradient end color class
  backgroundImageURL?: string; // Optional background image URL
}

// Determine image source and alt text
// const imageSrc = src; // Use the required src prop - No longer required here
// const imageAlt = alt; // Use the required alt prop - No longer required here

// Determine background styling
let backgroundClasses: string[] = ["overflow-hidden", "rounded-b-2xl"];
let backgroundStyle = "";

if (backgroundImageURL) {
    backgroundStyle = `background-image: url('${backgroundImageURL}');`;
    backgroundClasses.push("bg-cover", "bg-center");
} else if (gradientFromColor && gradientToColor) {
    backgroundClasses.push("bg-gradient-to-t", gradientFromColor, gradientToColor);
} else {
    backgroundClasses.push(backgroundColor); // Apply default or provided solid color
}

---
<!-- Section container: Apply dynamic background and optional min height -->
<section
  class:list={[
    "relative mx-auto grid max-w-[85rem] gap-4 px-4 pt-14 sm:px-6 md:grid-cols-2 md:gap-8 lg:px-8 2xl:max-w-full",
    ...backgroundClasses, // Spread the determined background classes
    minSectionHeight, 
  ]}
  style={backgroundImageURL ? `background-image: url('${backgroundImageURL}');` : undefined}
>
  <!-- Title and description container: Determines natural height -->
  <div id="hero-content" class="pt-16 md:pt-24 z-10 px-4 pb-14 sm:px-6 lg:px-8"> 
    <!-- Each h1 and p tag renders a portion of the title and subTitle defined above -->
    <h1
      id="hero-title"
      class="block text-balance text-3xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 sm:text-4xl lg:text-6xl lg:leading-tight"
    >
      <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
      <Fragment set:html={title} />
    </h1>
    {subTitle &&
    <p
      id="hero-subtitle"
      class="mt-3 text-pretty text-lg leading-relaxed text-neutral-700 dark:text-neutral-400 lg:w-4/5"
    >
      {subTitle}
    </p>
  }
    <!-- Action Button Section: This section includes two CTAs with their own styles and URL -->
    <div id="hero-buttons" class="mt-7 grid w-full gap-3 sm:inline-flex">
      {primaryBtn && 
      <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />
      }
      {secondaryBtn && 
      <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
      }
    </div>

    <!-- Review Section: This section presents avatars, review ratings and the number of reviews -->
    { withReview && (
    <ReviewComponent avatars={avatars} starCount={starCount} rating={rating} reviews={reviews} />
    ) }

  </div>

  <!-- Image container: No explicit height -->
  <div 
    id="hero-image-container"
    class:list={[
        "absolute top-0 md:w-1/2 lg:w-7/12 pointer-events-none",
        rightOffset, // Apply right offset prop
    ]}
  >
      {/* Simplified inner div */} 
      <div> 
          <Image
              src={src} 
              alt={alt} 
              width={imgWidth}
              height={imgHeight}
              widths={[400, imgWidth ?? 800]}
              sizes={`(max-width: 768px) 100vw, 50vw`}
              class:list={[
                  "h-auto w-full block", 
                  imageScale, // Apply scale prop
              ]}
              draggable={false}
              loading="eager"
          />
    </div>
  </div>
</section>
