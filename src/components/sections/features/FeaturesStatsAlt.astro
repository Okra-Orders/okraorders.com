---
import { Image } from "astro:assets";
import type { ImageMetadata } from 'astro'; // Correct type import
import { Icon } from 'astro-icon/components'; // Added new import

// Define props from Astro
const { 
    title, 
    subTitle, 
    benefits, 
    imgSrc, // String path (for external or video)
    imgObject, // Imported image object
    imgAlt, 
    imgWidth, 
    imgHeight, 
    imagePosition = 'left' 
} = Astro.props;

// Define TypeScript interface for props
interface Props {
  title: string;
  subTitle?: string;
  benefits?: Array<string>;
  imgSrc?: string; // Optional string path
  imgObject?: ImageMetadata; // Optional imported image
  imgAlt: string; // Alt text is REQUIRED
  imgWidth?: number; 
  imgHeight?: number; 
  imagePosition?: 'left' | 'right';
}

// Determine order classes based on imagePosition
const imageOrderClass = imagePosition === 'left' ? 'lg:order-1' : 'lg:order-2';
const textOrderClass = imagePosition === 'left' ? 'lg:order-2' : 'lg:order-1';

// Check if we should render an image (prioritize imgObject)
const imageToRender = imgObject || imgSrc;
// const effectiveAlt = imgAlt ?? ''; // No longer needed as imgAlt is required
const canRenderImage = imageToRender && imgWidth && imgHeight;

// Check if the media slot is used
const hasMediaSlot = Astro.slots.has('media');
---

<section
  class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
>
  <!-- Grid -->
  <div class="lg:grid lg:grid-cols-12 lg:items-center lg:gap-16">
    <div class={`lg:col-span-7 ${imageOrderClass}`}>
      {/* Render media slot > image object > image src */}
      {hasMediaSlot ? (
        <slot name="media" />
      ) : (
        (imgObject && canRenderImage) ? (
          <Image 
            class="rounded-xl w-full h-auto" 
            src={imgObject}
            alt={imgAlt}
            width={imgWidth!} 
            height={imgHeight!}
            loading="lazy" 
          />
        ) : (imgSrc && canRenderImage) ? (
          <img
            class="rounded-xl w-full h-auto" 
            src={imgSrc} 
            alt={imgAlt}
            width={imgWidth!} 
            height={imgHeight!}
            loading="lazy" 
          />
        ) : null
      )}
    </div>
    <div class={`mt-5 sm:mt-10 lg:col-span-5 lg:mt-0 ${textOrderClass}`}>
      <div class="space-y-6 sm:space-y-8">
        <div class="space-y-2 md:space-y-4">
          <h2
            class="text-balance text-3xl font-bold text-gray-900 lg:text-4xl"
          >
            {title}
          </h2>
          {
            subTitle && (
              <p class="text-pretty text-gray-600" set:html={subTitle}></p>
            )
          }
        </div>
        {
          benefits && (
            <ul class="space-y-2 sm:space-y-4">
              {benefits.map((item) => (
                <li class="flex space-x-3">
                  <Icon name="mdi:check-circle" class="mt-0.5 h-5 w-5 flex-shrink-0 text-primary" />
                  <span class="text-pretty text-base font-medium text-gray-700" set:html={item}></span>
                </li>
              ))}
            </ul>
          )
        }
        <slot name="link" />
        {/* NEW: Also add the note slot here if it needs to be inside the text column */}
        <slot name="note" />
      </div>
    </div>
  </div>
</section>
