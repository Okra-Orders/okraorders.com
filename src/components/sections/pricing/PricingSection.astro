---
// Import necessary components
import { Icon } from 'astro-icon/components';
// import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro"; // Removed unused import
// import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro"; // Removed unused import

// Define props from Astro
const { pricing } = Astro.props;

// Removed unused interfaces/types:
// type Plan = { ... };
// interface PricingFeature { ... };

// Extract plans into an array for easier iteration
const plans = [pricing.plan1, pricing.plan2, pricing.plan3];

---

<section
  class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full"
>
  <!-- Section heading and sub-heading -->
  <div class="mx-auto mb-10 max-w-2xl text-center lg:mb-14">
    <h2
      class="text-balance text-2xl font-bold tracking-tight text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight"
    >
      {pricing.title}
    </h2>
    <p class="mt-1 text-pretty text-neutral-600 dark:text-neutral-400">
      {pricing.subTitle}
    </p>
  </div>
  <!-- Updated grid for 3 plans -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 items-stretch justify-center">
    {
      plans.map((plan, index) => {
        // Determine classes based on index (e.g., highlight plan 2)
        const isHighlighted = index === 1;
        const cardClasses = isHighlighted
          ? "bg-primary text-white shadow-xl p-6 rounded-xl flex flex-col" // Applied custom green gradient class
          : "bg-gray-100 dark:bg-neutral-800 p-6 rounded-xl border border-gray-200 dark:border-neutral-700 flex flex-col"; // Standard card style
        const titleClasses = isHighlighted ? "text-white" : "text-neutral-800 dark:text-neutral-100";
        const descriptionClasses = isHighlighted ? "text-primary-100 dark:text-primary-200" : "text-neutral-600 dark:text-neutral-300";
        const priceClasses = isHighlighted ? "text-white" : "text-neutral-800 dark:text-neutral-200";
        const centsClasses = isHighlighted ? "text-primary-200 dark:text-primary-300" : "text-neutral-600 dark:text-neutral-400";
        const frequencyClasses = isHighlighted ? "text-primary-100 dark:text-primary-200" : "text-sm text-neutral-500 dark:text-neutral-400";
        const feeDetailsColorClasses = isHighlighted ? "text-primary-100 dark:text-primary-200" : "text-neutral-500 dark:text-neutral-400";
        const featureClasses = isHighlighted ? "text-primary-100 dark:text-primary-200" : "text-neutral-600 dark:text-neutral-300";
        const buttonClasses = isHighlighted
          ? "block rounded-full bg-white/90 px-8 py-3 text-center text-sm font-bold text-primary outline-hidden ring-primary-300 transition duration-300 hover:bg-white focus-visible:ring-3 active:bg-gray-100 md:text-base"
          : "block rounded-full bg-gray-500 px-8 py-3 text-center text-sm font-bold text-gray-100 outline-hidden ring-indigo-300 transition duration-100 hover:bg-gray-600 focus-visible:ring-3 active:text-gray-300 md:text-base";

        let currentFeeDetails = plan.feeDetails;
        // For the Starter plan (index 0), replace placeholder with dynamic text
        if (index === 0 && plan.platformFeeDisplayText && currentFeeDetails) {
          currentFeeDetails = currentFeeDetails.replace("{{platformFee}}", plan.platformFeeDisplayText);
        }

        return (
          <div class={cardClasses}>
            {/* Flex container for Name and Badge */}
            <div class="mb-2 flex items-center justify-between">
              <h3 class={`text-2xl font-bold ${titleClasses} sm:text-3xl`}>
                {plan.name}
              </h3>
              {isHighlighted && (
                <span class="inline-block rounded-full bg-white/20 px-3 py-1 text-xs font-bold uppercase tracking-wider text-white">
                  {pricing.badge}
                </span>
              )}
            </div>

            {/* Description */}
            <p class={`mb-4 ${descriptionClasses}`}>{plan.description}</p>

            {/* Price section */}
            <div class="mb-4">
              {index === 0 ? (
                <span class={`text-4xl font-bold ${priceClasses}`}>
                  {plan.price} {/* Will display "3%" for Starter */}
                </span>
              ) : (
                <>
                  <span class={`text-4xl font-bold ${priceClasses}`}>
                    {plan.price.startsWith("$") || plan.price === "Custom" ? plan.price : `$${plan.price}`}
                  </span>
                  <span class={`text-lg font-bold ${centsClasses}`}>{plan.cents}</span>
                </>
              )}
              <span class={`ms-3 ${frequencyClasses}`}>{plan.billingFrequency}</span>
            </div>

            {/* Fee Details Section */}
            {currentFeeDetails && (
              <div class="mt-2 mb-4"> {/* Container for spacing */}
                <p class={`text-xs ${feeDetailsColorClasses}`}>{currentFeeDetails}</p>
              </div>
            )}

            <ul class={`mb-6 space-y-2 flex-grow ${featureClasses}`}>
              {
                plan.features.map((feature: string) => (
                  <li class="flex items-center gap-1.5">
                    <Icon name="heroicons:check-circle" class="h-5 w-5 shrink-0 text-secondary" /> {/* Use primary color for check */}
                    <span>{feature}</span>
                  </li>
                ))
              }
            </ul>

            <a href={plan.purchaseLink} class={buttonClasses}>
              {plan.purchaseBtnTitle}
            </a>
          </div>
        );
      })
    }
  </div>
</section>
