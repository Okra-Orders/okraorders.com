---
// Layout and Base Components
import MainLayout from "@/layouts/MainLayout.astro";
import HeroSection from "@components/sections/landing/HeroSection.astro";
// import Icon from "@components/ui/icons/Icon.astro"; // Removed unused import
import { Icon } from "astro-icon/components"; // Import astro-icon component
// import { Image } from "astro:assets"; // Not needed for placeholders
import FeaturesStatsAlt from "@components/sections/features/FeaturesStatsAlt.astro"; // Import the adapted component
// import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro"; // Removed unused import
// import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro"; // Removed unused import
import CTASection from "@components/sections/misc/CTASection.astro"; // Added import
// Removed unused old imports: HeroSectionAlt, ClientsSection, FeaturesGeneral, FeaturesNavs, TestimonialsSection, PricingSection, FAQ, AnnouncementBanner
// Removed unused old data/image imports: heroImage, faqs, features, pricing, featureImage, construction, tools, dashboard, partnersData, avatarSrcs

// --- Import Actual Images --- 
// import heroImage from "@/images/okra-hero-homepage.png";
// import feature1Video from "/videos/pay-with-stored-cc.mp4";
import feature1Image from "@/images/place-order.png"; // Added import for the new image
import feature2Video from "/videos/store-ready.mp4"; // Keep video path as string
import featureWhiteLabelImage from "@/images/custom-url.png";
import feature3Image from "@/images/ezcater-order-inside-okra.png";
import ctaBgImage from "@/images/layered-waves-haikei.svg"; // Import the background SVG
// Removed unused placeholder image imports
// Removed placeholder image imports for support section (using alt text for now)

// --- Define Interfaces for Data (Keep these) ---
interface FeatureSectionData {
  tagline?: string;
  title: string;
  description: string;
  listItems: string[];
  linkText: string;
  linkUrl: string;
  imgSrc?: string; // Made imgSrc optional
  imgObject?: ImageMetadata; // Add optional prop for imported image objects
  imgAlt: string;
  imgWidth?: number; 
  imgHeight?: number; 
  imagePosition: 'left' | 'right';
  note?: string;
}

interface HowItWorksStep {
  number: number;
  title: string;
  description: string;
}

interface SupportItem {
  title: string;
  description: string;
  linkText: string;
  linkUrl: string;
  imgSrc: string;
  imgAlt: string;
  iconName?: string; // Add optional iconName property
}

// --- Data for Okra Sections (UPDATED with ImageMetadata and dimensions) ---
const pageTitle = "Okra Orders - Automate Your Catering Operations";
const hero = {
  title: `Automate the Hassle,<br class="hidden md:inline"> Focus on the <span class="text-primary">Food</span>.`,
  subTitle: "Okra Orders streamlines everything for your catering business - whether you're just starting or managing multiple locations. Handle online ordering, menus, ezCater & QuickBooks sync intuitively. Get started in minutes, explore freely.",
  primaryBtn: "Start Free Trial",
  primaryBtnURL: "/signup",
  secondaryBtn: "Try Live Demo",
  secondaryBtnURL: "https://demo.okraorders.com",
  videoSrc: "/videos/enable-store.mp4", // Added video source (public path)
  videoAlt: "Video showing how to enable a store in Okra Orders", // Added video alt text
};
const feature1: FeatureSectionData = {
  tagline: "Your Brand, Seamless Experience",
  title: "Impress Customers with Effortless Ordering",
  description: "Is your current online ordering clunky or causing confusion? Okra provides your customers with a professional, mobile-first experience that makes customization simple and checkout a breeze, building loyalty and reducing support calls. Look great online, whether it's your first store or your tenth.", // Updated Description
  listItems: [
    "Accurately capture complex customizations online.",
    "Enforce your business rules (hours, lead times) automatically.",
    "Securely saved payment info for fast repeat orders.",
    "Automated email updates keep customers informed.",
  ], // Content seems unchanged
  linkText: "Learn more about the customer experience →", // Updated arrow
  linkUrl: "/features/online-ordering/",
  imgObject: feature1Image, // Added image object
  imgAlt: "Screenshot of Okra Orders customer placing an order", // Updated alt text
  imgWidth: 500, // Added estimated width
  imgHeight: 450, // Added estimated height
  imagePosition: "left",
};
const feature2: FeatureSectionData = {
  tagline: "Full Control, Less Effort",
  title: "Manage Stores & Menus Intuitively",
  description: "Spending too much time updating menus or settings across multiple locations? Okra's admin panel makes setup and daily management efficient, giving you full control whether you run one kitchen or a dozen.", // Updated Description
  listItems: [
    "Quickly onboard with our guided setup wizard.",
    "Save hours duplicating items/menus across locations.",
    "Use AI image generation for quick, consistent visuals."
    // Removed White-Labeling Point
  ],
  note: "", // Added note
  linkText: "Explore management features →", // Updated arrow
  linkUrl: "/features/store-management/",
  imgSrc: feature2Video, // Keep video path string
  imgAlt: "Video: Admin duplicating menu items across locations", 
  imagePosition: "right",
};
// NEW White Label Feature Data
const featureWhiteLabel: FeatureSectionData = {
  tagline: "Your Brand, Your Platform",
  title: "Make Okra Orders Truly Yours",
  description: "Reinforce your brand identity and provide a seamless experience for your customers. Okra Orders allows you to use your own custom domain or subdomain and display your logo prominently on your online storefront.",
  listItems: [
    "Use your own domain (e.g., `order.yourwebsite.com`).",
    "Feature your business logo throughout the ordering process.",
    "Maintain consistent branding for customer trust.",
    "Customize to adapt to your business needs.",
  ],
  linkText: "Learn more about branding options →",
  linkUrl: "/features/store-management/#whitelabel",
  imgSrc: "", // No string path needed if using imgObject
  imgObject: featureWhiteLabelImage, // Use imported image object
  imgAlt: "Visual showing custom domain and logo placement on Okra storefront",
  imgWidth: 500, 
  imgHeight: 313, 
  imagePosition: "left", 
};
const feature3: FeatureSectionData = {
  tagline: "Automate & Unify",
  title: "Unify Operations & Automate Accounting",
  description: "Tired of juggling platforms and wasting hours on manual data entry? Okra acts as your central command center, unifying orders and automatically syncing sales data (from both Okra and <strong>ezCater</strong>!) with QuickBooks Online.",
  listItems: [
    "See Okra & <strong>ezCater</strong> orders side-by-side.",
    "<strong>Automatically push ezCater sales receipts to QuickBooks.</strong>",
    "Deep admin order editing capabilities (incl. Open Food).",
    "Optimize operations with Ghost Kitchens & order transfers.",
  ],
  linkText: "See how Okra connects your workflow →",
  linkUrl: "/features/integrations/",
  imgSrc: "", // No string path needed if using imgObject
  imgObject: feature3Image, // Use imported image object
  imgAlt: "Screenshot: Unified Order Dashboard showing Okra and ezCater orders",
  imgWidth: 500, 
  imgHeight: 425, 
  imagePosition: "right", 
};
const howItWorks: { title: string; steps: HowItWorksStep[]; footerText: string } = {
  title: "Get Up and Running Fast", // Content seems unchanged
  steps: [
    { number: 1, title: "Start Your Free Trial", description: "Sign up in minutes and begin exploring the Okra admin panel immediately. No credit card required." },
    { number: 2, title: "Set Up Your Store", description: "Use our guided wizard and in-app help to configure your menus, settings, and locations at your own pace." },
    { number: 3, title: "Connect & Go Live", description: "We'll help finalize your payment setup in parallel. Once ready, launch your storefront and start taking orders!" },
  ], // Content seems unchanged
  footerText: "Start setting up your software right away while we handle the payment onboarding process for you.", // Content seems unchanged
};
const supportSection: { title: string; items: SupportItem[] } = {
  title: "Stay Informed & Get Expert Support",
  items: [
    // Updated items with iconName, removed imgSrc/imgAlt placeholders
    { title: "Actionable AI Insights", description: "Track key metrics and get proactive AI-powered insights...", linkText: "Learn about analytics →", linkUrl: "/features/analytics-insights/", iconName: "heroicons:chart-pie", imgSrc: "", imgAlt: "" }, // Use chart-pie icon
    { title: "Help Right Within the App", description: "Get started fast with integrated help guides...", linkText: "Explore help features →", linkUrl: "/support/", iconName: "heroicons:question-mark-circle", imgSrc: "", imgAlt: "" }, // Use question-mark-circle icon
    { title: "Business-Focused Support", description: "Reach our expert team via chat or video call...", linkText: "Contact support →", linkUrl: "/support#contact", iconName: "heroicons:chat-bubble-left-right", imgSrc: "", imgAlt: "" }, // Use chat-bubble-left-right icon
  ]
}
const finalCTA = {
  title: "Ready to Automate Your Catering Business?",
  subTitle: "Explore flexible plans, see Okra Orders in action with our live demo, or start your free trial today. Discover how easy catering management can be.",
  primaryBtn: "Start Your Free Trial",
  primaryBtnURL: "/signup",
  secondaryBtn: "Try Live Demo",
  secondaryBtnURL: "https://demo.okraorders.com",
  tertiaryBtn: "View Plans & Pricing",
  tertiaryBtnURL: "/pricing/",
  bgImageURL: ctaBgImage.src,
  textColor: "white" as const
};
---

<MainLayout title={pageTitle}>

  <!-- 1. Hero Section -->
  <HeroSection
    title={hero.title}
    subTitle={hero.subTitle}
    primaryBtn={hero.primaryBtn}
    primaryBtnURL={hero.primaryBtnURL}
    secondaryBtn={hero.secondaryBtn}
    secondaryBtnURL={hero.secondaryBtnURL}
    withReview={false}
    videoSrc={hero.videoSrc} 
    videoAlt={hero.videoAlt} 
  /> {/* Pass video source & alt text */}

  <!-- 2. Feature Section 1 -->
  <section id="features" class="py-16 md:py-24 bg-white rounded-xl">
     <FeaturesStatsAlt
        title={feature1.title}
        subTitle={feature1.description}
        benefits={feature1.listItems}
        imagePosition={feature1.imagePosition}
        imgObject={feature1.imgObject}  
        imgAlt={feature1.imgAlt}        
        imgWidth={feature1.imgWidth}    
        imgHeight={feature1.imgHeight}  
     > {/* Pass imgObject, imgAlt, imgWidth, imgHeight */} 
        <Fragment slot="link">
            <div class="mt-6">
               <a href={feature1.linkUrl} class="text-primary font-semibold hover:underline">{feature1.linkText}</a>
            </div>
        </Fragment>
     </FeaturesStatsAlt>
  </section>

  <!-- 3. Feature Section 2 (Uses Video Slot) -->
  <section class="py-16 md:py-24">
    <FeaturesStatsAlt
        title={feature2.title}
        subTitle={feature2.description}
        benefits={feature2.listItems}
        imagePosition={feature2.imagePosition}
        imgAlt={feature2.imgAlt}
     >
        <Fragment slot="media">
            <video
                class="rounded-lg shadow-xl mx-auto"
                width="100%" 
                height="auto"
                autoplay
                loop
                muted
                playsinline
                preload="auto"
                src={feature2.imgSrc} 
                aria-label={feature2.imgAlt}
            > {/* Use path from data */} 
                Your browser does not support the video tag.
            </video>
        </Fragment>
        {feature2.note && (
             <Fragment slot="note">
                 <p class="text-xs text-gray-500 italic mt-4">{feature2.note}</p>
            </Fragment>
        )}
        <Fragment slot="link">
             <div class="mt-6">
                <a href={feature2.linkUrl} class="text-primary font-semibold hover:underline">{feature2.linkText}</a>
             </div>
        </Fragment>
     </FeaturesStatsAlt>
  </section>

  <!-- NEW: 4. White-Labeling Feature Section (Uses Image Props) -->
  <section class="py-16 md:py-24 bg-white rounded-xl">
      <FeaturesStatsAlt
          title={featureWhiteLabel.title}
          subTitle={featureWhiteLabel.description}
          benefits={featureWhiteLabel.listItems}
          imagePosition={featureWhiteLabel.imagePosition}
          imgObject={featureWhiteLabel.imgObject} 
          imgAlt={featureWhiteLabel.imgAlt}
          imgWidth={featureWhiteLabel.imgWidth}
          imgHeight={featureWhiteLabel.imgHeight}
       > {/* Pass imported image object */} 
          <Fragment slot="link">
               <div class="mt-6">
                  <a href={featureWhiteLabel.linkUrl} class="text-primary font-semibold hover:underline">{featureWhiteLabel.linkText}</a>
               </div>
          </Fragment>
       </FeaturesStatsAlt> 
  </section>

  <!-- 5. Feature Section 3 (Integrations - Uses Image Props) -->
  <section id="integrations" class="py-16 md:py-24">
      <FeaturesStatsAlt
        title={feature3.title}
        subTitle={feature3.description}
        benefits={feature3.listItems}
        imagePosition={feature3.imagePosition}
        imgObject={feature3.imgObject} 
        imgAlt={feature3.imgAlt}
        imgWidth={feature3.imgWidth}
        imgHeight={feature3.imgHeight}
     > {/* Pass imported image object */} 
        <Fragment slot="link">
             <div class="mt-6">
                <a href={feature3.linkUrl} class="text-primary font-semibold hover:underline">{feature3.linkText}</a>
             </div>
        </Fragment>
     </FeaturesStatsAlt> 
  </section>

  <!-- 6. How it Works Section -->
  <section class="py-16 md:py-24 bg-white rounded-xl">
     <div class="container mx-auto px-6 text-center">
       <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-12">{howItWorks.title}</h2>
       <div class="grid md:grid-cols-3 gap-8">
         {howItWorks.steps.map(step => (
           // Use Preline Card structure + standard Tailwind border classes (border + border-secondary)
           <div class="flex flex-col bg-white border border-secondary shadow-sm rounded-xl dark:bg-neutral-900 dark:border-secondary dark:shadow-neutral-700/70"> {/* Reverted to border border-secondary */}
             <div class="p-4 md:p-6"> 
               <div class="text-4xl text-primary mb-4">{step.number}</div>
               <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">{step.title}</h3>
               <p class="text-gray-600 dark:text-neutral-400" set:html={step.description}></p>
             </div>
           </div>
         ))}
       </div>
       <p class="mt-10 text-gray-600 dark:text-neutral-400 italic">{howItWorks.footerText}</p>
     </div>
  </section>

  <!-- 7. Analytics / Support Snippet Section -->
  <section id="support" class="py-16 md:py-24">
     <div class="container mx-auto px-6 text-center">
       <h2 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-12">{supportSection.title}</h2>
       <div class="max-w-4xl mx-auto grid md:grid-cols-3 gap-8">
          {supportSection.items.map(item => (
            // Use Preline Card structure + standard Tailwind border classes (border + border-secondary)
            <div class="flex flex-col bg-white border border-secondary shadow-sm rounded-xl dark:bg-neutral-900 dark:border-secondary dark:shadow-neutral-700/70"> {/* Reverted to border border-secondary */}
              {/* Replace placeholder div with Icon component */}
              <div class="flex justify-center items-center h-32 rounded-t-xl bg-gray-50 dark:bg-neutral-800"> {/* Adjusted height, added bg */}
                {item.iconName && (
                  <Icon name={item.iconName} class="h-16 w-16 text-primary" /> // Use Icon component with primary color and size
                )}
              </div>
              <div class="p-4 md:p-5 text-left"> 
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">{item.title}</h3>
                <p class="text-gray-600 dark:text-neutral-400 text-sm mb-4" set:html={item.description}></p> 
                <a href={item.linkUrl} class="text-primary font-semibold hover:underline text-sm">{item.linkText}</a>
              </div>
            </div>
          ))}
       </div>
     </div>
  </section>

  <!-- 9. Final CTA Section (Using Combined Config) -->
  <CTASection
    title={finalCTA.title}
    subTitle={finalCTA.subTitle}
    primaryBtn={finalCTA.primaryBtn}
    primaryBtnURL={finalCTA.primaryBtnURL}
    secondaryBtn={finalCTA.secondaryBtn}
    secondaryBtnURL={finalCTA.secondaryBtnURL}
    tertiaryBtn={finalCTA.tertiaryBtn}
    tertiaryBtnURL={finalCTA.tertiaryBtnURL}
    bgImageURL={finalCTA.bgImageURL}
    textColor={finalCTA.textColor}
  />

</MainLayout>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger"; // Optional: If you want animations triggered by scroll

  gsap.registerPlugin(ScrollTrigger); // Optional: Register plugin if used

  document.addEventListener("DOMContentLoaded", () => {
    // Ensure elements exist before animating
    const heroTitle = document.querySelector("#hero-title"); // Use querySelector for IDs
    const heroSubtitle = document.querySelector("#hero-subtitle"); // Use querySelector for IDs
    const heroButtons = document.querySelector("#hero-buttons"); // Use querySelector for IDs
    const heroImage = document.querySelector("#hero-image-container"); // Target the container

    // Simple fade-in and slide-up animation
    // Stagger the animations slightly for a nicer effect
    const tl = gsap.timeline({ defaults: { duration: 0.7, ease: "power2.out", opacity: 0, y: 30 } });

    if (heroTitle) {
        tl.from(heroTitle, { delay: 0.2 }); // Start slightly later
    }
    if (heroSubtitle) {
        tl.from(heroSubtitle, {}, "-=0.5"); // Overlap previous animation slightly
    }
    if (heroButtons) {
        tl.from(heroButtons, {}, "-=0.5"); // Overlap previous animation slightly
    }
    if (heroImage) {
        // Animate the image container (you could target the img itself too)
        // Changed y: 0 as sliding up might not make sense depending on layout
        tl.from(heroImage, { duration: 1, y: 0 }, "-=0.7"); // Overlap more, longer duration
    }

    // --- Section Animations on Scroll ---
    gsap.utils.toArray<HTMLElement>('section').forEach(section => {
      // Skip the hero section if it's manually animated above
      // or apply a default animation if needed.
      // For simplicity, let's animate all sections found.

      // Check if the section is NOT the hero section's direct parent container
      // (assuming hero is not wrapped in its own <section> in this page structure)
      // A better approach might be to add a specific class to sections we WANT to animate.
      // For now, let's animate all sections found.

      gsap.from(section, {
        scrollTrigger: {
          trigger: section,
          start: "top 85%", // Start animation when top of section is 85% from viewport top
          end: "bottom 15%", // End defines scrub area if scrub is enabled
          toggleActions: "play none none reverse", // Play on enter, reverse on leave
          // markers: true, // Uncomment during development to see triggers
        },
        opacity: 0,
        y: 30,       // Subtle slide up
        duration: 0.6, // Slightly faster
        ease: "power1.out",
      });
    });

  });
</script>
