---
// Layout and Base Components
import MainLayout from "@/layouts/MainLayout.astro";
// import HeroSection from "@components/sections/landing/HeroSection.astro"; // Remove old hero
import HeroBackground from "@components/sections/landing/HeroBackground.astro"; // Add new hero
import PricingSection from "@components/sections/pricing/PricingSection.astro"; // For pricing tiers
import FAQ from "@components/sections/misc/FAQ.astro"; // For FAQ section
import { Icon } from 'astro-icon/components'; // For icons
// import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro"; // Removed unused import
// import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro"; // Removed unused import
import IconListSection from "@components/sections/features/IconListSection.astro"; // Added import
import CTASection from "@components/sections/misc/CTASection.astro"; // Added import
// import pricingHeroBg from '@/images/pricing-that-grows.png'; // Import the new background image
import okraHeaderBg from '@/images/okra-header.png'; // Import the new hero background image
import ctaBgImage from "@/images/layered-waves-haikei.svg"; // Import the background SVG

// Import pricing data directly from JSON
import pricingContent from "@/data_files/pricing.json";

// --- Page Data ---
const pageTitle = "Pricing | Okra Orders";
const pageDescription = "Simple, flexible pricing for Okra Orders catering software. Choose a plan that fits your business size and volume, from startups to multi-location operations.";

const hero = {
  title: "Simple, Flexible Pricing That Grows With Your Catering Business",
  subTitle: "Okra Orders offers straightforward pricing for caterers of all sizes. From the growing 'Starter' plan to the comprehensive 'Pro' plan and custom 'Enterprise' solutions, find the perfect fit. No hidden platform fees, just clear value and powerful catering management.",
  imgAlt: "Stylized graphic representing growth and flexibility in pricing", // Updated Alt text for new image
  imgSrc: okraHeaderBg, // Use imported image
  // Add visual placeholder comment/asset later if needed
};

// Config for Core Value Prop IconListSection
const coreValueProps = {
  title: "More Than Just Software: An Investment in Efficiency", // Use title instead of headline for component
  subTitle: "Okra Orders isn't just another tool; it's your operational hub. Our pricing reflects the value we bring by automating manual tasks, unifying your platforms, enhancing your customer experience, and ultimately giving you back time to focus on great food and service.",
  items: [
    { iconName: "heroicons:clock", text: "Save Hours Weekly" }, // Removed description
    { iconName: "heroicons:arrows-pointing-in", text: "Unified Platform" },
    { iconName: "heroicons:sparkles", text: "Elevated Customer Experience" },
    { iconName: "heroicons:chart-bar-square", text: "Scales With You" }
  ]
  // Note: Descriptions were part of the original custom layout
};

const pricingPhilosophy = {
  headline: "Choose the Plan That Fits Your Flow",
  body: "We understand every catering business is unique. That's why we offer clear pricing options. Whether you're starting out and prefer costs tied to your sales, or you're an established business seeking predictable monthly fees, Okra Orders delivers exceptional value.",
  optionA: "Our Pro Plan offers a comprehensive suite of features for a flat monthly fee per location, ideal for businesses focused on stability and advanced capabilities.",
  optionB: "Our Starter Plan is designed for growth, with a platform fee based on your processed order volume (up to a cap) and a low monthly minimum, ensuring affordability as you scale.",
  cta: "Explore the plans below or contact us to schedule a demo and discuss the best fit for your specific needs."
};

const integratedPayments = {
  headline: "Competitive, Integrated Payment Processing",
  body: "Okra Orders includes secure, PCI-compliant payment processing directly within the platform. Our competitive rates simplify your operations and cash flow. Full rate details are transparently provided during onboarding."
};

// FAQ Data
const starterPlatformFeeTextForFaq = pricingContent.plan1.platformFeeDisplayText || "3%"; // Fallback if not defined

const pricingFaqs = {
  title: "Your Pricing Questions Answered",
  faqs: [
    { question: "Is there a free trial?", answer: "We currently focus on providing personalized demos tailored to your business needs rather than a one-size-fits-all free trial. This allows us to show you the most relevant features and answer your specific questions. Please contact us to schedule your demo!" },
    { question: "What if I only have one small catering location?", answer: `Absolutely. Our Starter Plan is designed for this, with a low $${pricingContent.plan1.price} monthly minimum SaaS fee and a revenue-based charge ${starterPlatformFeeTextForFaq}, making it highly accessible. The goal is for Okra to provide immediate value.` },
    { question: "Do I need to sign a long-term contract?", answer: "We offer flexible monthly subscriptions for our Starter and Pro plans, allowing you to adapt as your business evolves." },
    { question: "Are there additional fees for integrating with ezCater or QuickBooks?", answer: "Core integrations like ezCater order viewing and QuickBooks Online sales receipt pushing are included in our Pro Plan and above." },
    { question: "How does the volume-based pricing work?", answer: `Our Starter Plan links your platform fee to your processed order volume at ${starterPlatformFeeTextForFaq} with a $${pricingContent.plan1.price}/month minimum. This ensures affordability as you grow. Please check the calculator above to estimate your monthly fee.` },
    { question: "Are there setup fees or hidden costs?", answer: "We believe in transparent pricing. Our Starter and Pro plans have clear monthly SaaS fees plus competitive integrated payment processing rates. Standard onboarding is included. Custom work for Enterprise plans is scoped and quoted separately." },
    { question: "When does billing for the SaaS plan start?", answer: `Your first monthly SaaS fee (e.g., $${pricingContent.plan1.price} for Starter, $${pricingContent.plan2.price} for Pro) is charged only after your payment processing account is fully set up and your Okra Orders store is live and ready to take orders.` },
    { question: "What's included in terms of support?", answer: "All plans include access to our in-app help resources (tours, tooltips, knowledge base) and standard support channels like live chat and email. Higher tiers may include more personalized support options like dedicated account management or priority video calls." }
  ]
};

// Final CTA Data
const finalCTA = {
  title: "Ready to Find the Perfect Fit?", // Use title instead of headline
  subTitle: "See how Okra Orders can transform your catering business. Schedule a personalized demo with our team, or explore our features with an interactive walkthrough.",
  primaryBtn: "Schedule Personalized Demo",
  primaryBtnURL: "/contact", // Assuming /contact is the page for demo requests
  secondaryBtn: "Try Interactive Demo",
  secondaryBtnURL: "https://demo.okraorders.com",
  bgImageURL: ctaBgImage.src, // Add background image
  textColor: "white" as const // Keep text white
};

---

<MainLayout title={pageTitle} meta={pageDescription}>

  <!-- 1. Hero Section -->
  {/* <div class="bg-gradient-to-b from-green-50 to-white pt-16 md:pt-24 pb-8 md:pb-12"> */}
    {/* <HeroSection
      title={hero.title}
      subTitle={hero.subTitle}
      primaryBtn={undefined}
      primaryBtnURL={undefined}
      secondaryBtn={undefined}
      secondaryBtnURL={undefined}
    /> */}
    {/* Visual Placeholder */}
    {/* <div class="text-center mt-8"><div class="inline-block bg-gray-200 h-48 w-96 rounded-lg"></div></div> */}
  {/* </div> */}
  <HeroBackground
    title={hero.title}
    subTitle={hero.subTitle}
    imgSrc={hero.imgSrc}
    imgAlt={hero.imgAlt}
    minHeight="min-h-[400px] md:min-h-[500px]"
    textShadow="text-shadow-lg"
    backgroundPosition="object-[50%_100%]"
  />

  <!-- 2. Core Value Proposition (Using IconListSection) -->
  <IconListSection
      title={coreValueProps.title}
      subTitle={coreValueProps.subTitle}
      items={coreValueProps.items}
  />
  {/*
  <section class="py-16 md:py-24">
      <div class="container mx-auto px-6 text-center">
          ...
      </div>
  </section>
  */}

  <!-- 3. Pricing Model Philosophy / Flexibility Explanation -->
  <section class="py-8 md:py-24 bg-white rounded-xl">
    <div class="container mx-auto px-6 max-w-3xl text-center">
        <h2 class="text-3xl font-bold text-neutral-800 mb-4">{pricingPhilosophy.headline}</h2>
        <p class="text-lg text-gray-600 mb-6">{pricingPhilosophy.body}</p>
        <div class="text-left space-y-4 bg-neutral-50 p-6 rounded-lg border border-neutral-200 mb-6">
           <p><strong class="text-neutral-700">Pro Plan:</strong> {pricingPhilosophy.optionA}</p>
           <p><strong class="text-neutral-700">Standard Plan:</strong> {pricingPhilosophy.optionB}</p>
        </div>
        <p class="text-lg text-gray-700 font-medium">{pricingPhilosophy.cta}</p>
    </div>
  </section>

  <!-- 4. Pricing Tiers Section - Data passed via prop -->
  <section class="py-0 md:py-24">
     <PricingSection pricing={pricingContent} />
     {/* Removed manual footnote, assuming component handles relevant data from JSON */}
  </section>

  <!-- START: Interactive Pricing Calculator -->
  <section class="py-12 md:py-20 bg-neutral-50 dark:bg-neutral-800 rounded-xl my-12">
    <div class="container mx-auto px-6 max-w-3xl text-center">
      <h2 class="text-3xl font-bold text-neutral-800 dark:text-neutral-200 mb-4">Estimate Your Monthly Cost</h2>
      <p class="text-lg text-gray-600 dark:text-neutral-400 mb-8">
        Use the sliders below to estimate your total monthly cost for our Starter and Pro plans.
      </p>

      <div class="mb-6">
        <label for="revenueSlider" class="block text-lg font-medium text-neutral-700 dark:text-neutral-300 mb-2">
          Estimated Monthly Revenue Per Location: <span id="revenueValueDisplay" class="font-bold text-primary">$10,000</span>
        </label>
        <input
          type="range"
          id="revenueSlider"
          min="0"
          max="150000"
          value="10000"
          step="250"
          class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700 accent-[#8DC640]"
        />
      </div>

      <div class="mb-6"> {/* Consistent margin */}
        <label for="locationsSlider" class="block text-lg font-medium text-neutral-700 dark:text-neutral-300 mb-2">
          Number of Locations: <span id="locationsValueDisplay" class="font-bold text-primary">1</span>
        </label>
        <input
          type="range"
          id="locationsSlider"
          min="1"
          max="30"
          value="1"
          step="1"
          class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700 accent-[#8DC640]"
        />
      </div>

      <div class="my-6 p-4 bg-primary-50 dark:bg-neutral-750 rounded-lg text-center">
        <p class="text-lg font-medium text-neutral-700 dark:text-neutral-300">
          Total Estimated Monthly Revenue (All Locations):
          <span id="totalRevenueValueDisplay" class="font-bold text-primary">$10,000</span>
        </p>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div id="starter-plan-calculator-card" class="bg-white dark:bg-neutral-700 p-6 rounded-lg shadow text-left">
          <h3 class="text-xl font-semibold text-neutral-800 dark:text-neutral-200 mb-3 text-center">Starter Plan Estimate</h3>
          <p class="flex justify-between items-baseline">
            <span class="text-neutral-600 dark:text-neutral-300">Okra Fee:</span>
            <span id="starterOkraFeeDisplay" class="text-2xl font-bold text-primary">$0.00</span>
          </p>
          <p class="flex justify-between items-baseline mt-1">
            <span class="text-sm text-neutral-500 dark:text-neutral-400">Payment Processing Fee (est):</span>
            <span id="starterPaymentFeeDisplay" class="text-sm font-medium text-neutral-600 dark:text-neutral-400">$0.00</span>
          </p>
          <p class="flex justify-between items-baseline mt-2 pt-2 border-t border-neutral-200 dark:border-neutral-600">
            <span class="text-lg font-semibold text-neutral-700 dark:text-neutral-200">Total Monthly Cost:</span>
            <span id="starterTotalCostDisplay" class="text-lg font-bold text-primary">$0.00</span>
          </p>
          <div id="starter-plan-limit-message" class="mt-2 text-sm text-red-600" style="display: none;"></div>
        </div>
        <div class="bg-white dark:bg-neutral-700 p-6 rounded-lg shadow text-left">
          <h3 class="text-xl font-semibold text-neutral-800 dark:text-neutral-200 mb-3 text-center">Pro Plan Estimate</h3>
          <p class="flex justify-between items-baseline">
            <span class="text-neutral-600 dark:text-neutral-300">Okra Fee:</span>
            <span id="proOkraFeeDisplay" class="text-2xl font-bold text-primary">$0.00</span>
          </p>
          <p class="flex justify-between items-baseline mt-1">
            <span class="text-sm text-neutral-500 dark:text-neutral-400">Payment Processing Fee (est):</span>
            <span id="proPaymentFeeDisplay" class="text-sm font-medium text-neutral-600 dark:text-neutral-400">$0.00</span>
          </p>
          <p class="flex justify-between items-baseline mt-2 pt-2 border-t border-neutral-200 dark:border-neutral-600">
            <span class="text-lg font-semibold text-neutral-700 dark:text-neutral-200">Total Monthly Cost:</span>
            <span id="proTotalCostDisplay" class="text-lg font-bold text-primary">$0.00</span>
          </p>
        </div>
      </div>

      <p class="text-xs text-gray-500 dark:text-neutral-500">
        * Estimates assume an average transaction value of $250 for calculating per-transaction payment processing fees (3.5% + $0.25/transaction). Platform fees for Starter are <span id="disclaimerPlatformFeeText">0%</span> of revenue with a $99/mo per location. Pro plan Okra (SaaS) fee is $299/mo per location. Actual costs may vary.
      </p>
    </div>
  </section>
  <!-- END: Interactive Pricing Calculator -->

  <!-- 5. Integrated Payments Note -->
  <section class="py-6 md:py-24 bg-neutral-50 rounded-xl">
      <div class="container mx-auto px-6 max-w-3xl text-center">
         <Icon name="heroicons:credit-card" class="w-12 h-12 mx-auto text-primary mb-3" />
         <h2 class="text-3xl font-bold text-neutral-800 mb-4">{integratedPayments.headline}</h2>
         <p class="text-lg text-gray-600">{integratedPayments.body}</p>
      </div>
  </section>

  <!-- 6. FAQ Section -->
  <section class="py-0 md:py-24 bg-white my-12 rounded-2xl">
    <FAQ title={pricingFaqs.title} faqs={pricingFaqs} />
  </section>

  <!-- 7. Final CTA Section (Using CTASection Component) -->
   <CTASection
      title={finalCTA.title}
      subTitle={finalCTA.subTitle}
      primaryBtn={finalCTA.primaryBtn}
      primaryBtnURL={finalCTA.primaryBtnURL}
      secondaryBtn={finalCTA.secondaryBtn}
      secondaryBtnURL={finalCTA.secondaryBtnURL}
      bgImageURL={finalCTA.bgImageURL}
      textColor={finalCTA.textColor}
  />

  {/* Original custom section commented out properly */}
  {/*
  <section class="bg-primary text-white py-16 md:py-20 rounded-xl">
      <div class="container mx-auto px-6 text-center">
          ...
      </div>
  </section>
  */}

<script>
  // Optional: Add GSAP animations if desired
  // This script is intentionally placed inside MainLayout, before its closing tag.
  // It relies on DOMContentLoaded to ensure elements are available.
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener("DOMContentLoaded", () => {
    gsap.utils.toArray<HTMLElement>('section').forEach((section, i) => {
      // Skip hero if desired
      if (i === 0 && section.parentElement?.classList.contains('bg-gradient-to-b')) return;

      gsap.from(section, {
        scrollTrigger: {
          trigger: section,
          start: "top 85%",
          end: "bottom 15%",
          toggleActions: "play none none reverse",
          // markers: true,
        },
        opacity: 0,
        y: 30,
        duration: 0.6,
        ease: "power1.out",
      });
    });
  });
</script>
  <script define:vars={{ pricingData: pricingContent, starterMinSaasFeePassed: Number(pricingContent.plan1.price), proSaasFeePerLocationPassed: Number(pricingContent.plan2.price), starterPlatformFeeNumericalRatePassed: Number(pricingContent.plan1.platformFeeNumericalRate), starterPlatformFeeDisplayTextPassed: pricingContent.plan1.platformFeeDisplayText }}>
    // Plain JavaScript for Pricing Calculator
    // Values starterMinSaasFeePassed and proSaasFeePerLocationPassed are injected by Astro's define:vars
    document.addEventListener('DOMContentLoaded', function() { // Using function() for wider browser compatibility
      console.log("Pricing Calculator Script Loaded");
      // Note: starterMinSaasFeePassed and proSaasFeePerLocationPassed are globally available here from define:vars
      // We'll log them after checking if they exist to avoid reference errors if something went wrong with define:vars
      if (typeof starterMinSaasFeePassed !== 'undefined' && typeof proSaasFeePerLocationPassed !== 'undefined' && typeof starterPlatformFeeNumericalRatePassed !== 'undefined' && typeof starterPlatformFeeDisplayTextPassed !== 'undefined') {
        console.log(`define:vars - starterMinSaasFeePassed: ${starterMinSaasFeePassed}, proSaasFeePerLocationPassed: ${proSaasFeePerLocationPassed}, starterPlatformFeeNumericalRatePassed: ${starterPlatformFeeNumericalRatePassed}, starterPlatformFeeDisplayTextPassed: '${starterPlatformFeeDisplayTextPassed}'`);
      } else {
        console.error("One or more define:vars values not found. Calculator may use fallback default values.");
      }

      const revenueSlider = document.getElementById('revenueSlider');
      const revenueValueDisplay = document.getElementById('revenueValueDisplay');
      const locationsSlider = document.getElementById('locationsSlider');
      const locationsValueDisplay = document.getElementById('locationsValueDisplay');
      const totalRevenueValueDisplay = document.getElementById('totalRevenueValueDisplay'); // New element

      const starterOkraFeeDisplay = document.getElementById('starterOkraFeeDisplay');
      const starterPaymentFeeDisplay = document.getElementById('starterPaymentFeeDisplay');
      const starterTotalCostDisplay = document.getElementById('starterTotalCostDisplay');

      const proOkraFeeDisplay = document.getElementById('proOkraFeeDisplay');
      const proPaymentFeeDisplay = document.getElementById('proPaymentFeeDisplay');
      const proTotalCostDisplay = document.getElementById('proTotalCostDisplay');
      const disclaimerPlatformFeeText = document.getElementById('disclaimerPlatformFeeText'); // New element for disclaimer

      console.log({
        revenueSlider: revenueSlider,
        revenueValueDisplay: revenueValueDisplay,
        locationsSlider: locationsSlider,
        locationsValueDisplay: locationsValueDisplay,
        totalRevenueValueDisplay: totalRevenueValueDisplay, // New element
        starterOkraFeeDisplay: starterOkraFeeDisplay,
        starterPaymentFeeDisplay: starterPaymentFeeDisplay,
        starterTotalCostDisplay: starterTotalCostDisplay,
        proOkraFeeDisplay: proOkraFeeDisplay,
        proPaymentFeeDisplay: proPaymentFeeDisplay,
        proTotalCostDisplay: proTotalCostDisplay,
        disclaimerPlatformFeeText: disclaimerPlatformFeeText // New element for disclaimer
      });

      // Fallback defaults if define:vars fails for some reason, actual values injected by Astro
      const localStarterMinSaasFee = (typeof starterMinSaasFeePassed !== 'undefined') ? starterMinSaasFeePassed : 99;
      const localProSaasFeePerLocation = (typeof proSaasFeePerLocationPassed !== 'undefined') ? proSaasFeePerLocationPassed : 299;
      const localStarterPlatformFeeNumericalRate = (typeof starterPlatformFeeNumericalRatePassed !== 'undefined') ? starterPlatformFeeNumericalRatePassed : 0.03; // Fallback to 3%
      const localStarterPlatformFeeDisplayText = (typeof starterPlatformFeeDisplayTextPassed !== 'undefined') ? starterPlatformFeeDisplayTextPassed : "3%"; // Fallback to "3%"


      const AVERAGE_TRANSACTION_VALUE = 250;
      const PAYMENT_FEE_PERCENTAGE = 0.035;
      const PAYMENT_FEE_FIXED = 0.25;
      // STARTER_PLATFORM_FEE_PERCENTAGE is replaced by localStarterPlatformFeeNumericalRate
      const STARTER_PLATFORM_FEE_MAX_REVENUE_FOR_PERCENTAGE = 10000;
      const STARTER_MAX_PLATFORM_FEE = STARTER_PLATFORM_FEE_MAX_REVENUE_FOR_PERCENTAGE * localStarterPlatformFeeNumericalRate;

      function calculateCosts(monthlyRevenue, numberOfLocations) {
        console.log('calculateCosts called with: monthlyRevenue=' + monthlyRevenue + ', numberOfLocations=' + numberOfLocations);

        monthlyRevenue = Number(monthlyRevenue) || 0;
        numberOfLocations = Number(numberOfLocations) || 0;

        const numberOfTransactions = monthlyRevenue > 0 ? Math.max(1, Math.round(monthlyRevenue / AVERAGE_TRANSACTION_VALUE)) : 0;
        const paymentProcessingFee = (monthlyRevenue * PAYMENT_FEE_PERCENTAGE) + (numberOfTransactions * PAYMENT_FEE_FIXED);

        let starterOkraFee;
        // Calculate the fee based on percentage of revenue, respecting the cap
        let percentageBasedStarterFee;
        if (monthlyRevenue > 0) {
            // Assuming localStarterPlatformFeeNumericalRate is pricingData.plan1.platformFeeNumericalRate
            // Assuming STARTER_MAX_PLATFORM_FEE is (10000 * pricingData.plan1.platformFeeNumericalRate)
            percentageBasedStarterFee = monthlyRevenue * localStarterPlatformFeeNumericalRate;
            if (percentageBasedStarterFee > STARTER_MAX_PLATFORM_FEE) {
                percentageBasedStarterFee = STARTER_MAX_PLATFORM_FEE;
            }
        } else {
            percentageBasedStarterFee = 0;
        }

        // Calculate the total minimum charge based on number of locations
        // pricingData is assumed to be in scope (e.g., from define:vars)
        const minChargePerLocation = pricingData.plan1.minimumMonthlyCharge;
        const totalMinimumBasedOnLocations = minChargePerLocation * numberOfLocations;

        // The final Starter Okra Fee is the greater of the two calculations
        starterOkraFee = Math.max(totalMinimumBasedOnLocations, percentageBasedStarterFee);

        // If numberOfLocations is 0 (though slider prevents this), totalMinimumBasedOnLocations would be 0.
        // If revenue is 0, percentageBasedStarterFee is 0. So starterOkraFee = totalMinimumBasedOnLocations. Correct.

        const actualStarterOkraFee = starterOkraFee;
        const actualStarterPaymentFee = paymentProcessingFee; // This will be 0 if revenue is 0
        const totalStarterCost = actualStarterOkraFee + actualStarterPaymentFee;

        const proOkraFee = localProSaasFeePerLocation * numberOfLocations;
        const totalProCost = monthlyRevenue > 0 ? proOkraFee + paymentProcessingFee : (numberOfLocations > 0 ? proOkraFee : 0);
        const actualProOkraFee = numberOfLocations > 0 ? proOkraFee : 0;
        const actualProPaymentFee = monthlyRevenue > 0 ? paymentProcessingFee : 0;

        const results = {
          starter: { okraFee: actualStarterOkraFee, paymentProcessingFee: actualStarterPaymentFee, totalCost: totalStarterCost },
          pro: { okraFee: actualProOkraFee, paymentProcessingFee: actualProPaymentFee, totalCost: totalProCost }
        };
        console.log("calculateCosts results:", results);
        return results;
      }

      function updateDisplay() {
        console.log("updateDisplay called");
        // Assuming IDs: 'starter-plan-calculator-card' for the card, 'starter-plan-limit-message' for the message div
        const starterPlanCardElement = document.getElementById('starter-plan-calculator-card');
        const starterPlanLimitMessageElement = document.getElementById('starter-plan-limit-message');

        if (!revenueSlider || !revenueValueDisplay || !locationsSlider || !locationsValueDisplay || !totalRevenueValueDisplay ||
            !starterOkraFeeDisplay || !starterPaymentFeeDisplay || !starterTotalCostDisplay ||
            !proOkraFeeDisplay || !proPaymentFeeDisplay || !proTotalCostDisplay ||
            !starterPlanCardElement || !starterPlanLimitMessageElement ) { // Added checks for new elements
          console.error('One or more calculator DOM elements not found in updateDisplay.');
          return;
        }

        const revenuePerLocation = revenueSlider.value ? parseFloat(revenueSlider.value) : 0;
        const numberOfLocations = locationsSlider.value ? parseInt(locationsSlider.value) : 1;
        const totalMonthlyRevenue = revenuePerLocation * numberOfLocations;

        console.log('updateDisplay values: revenuePerLocation=' + revenuePerLocation + ', numberOfLocations=' + numberOfLocations + ', totalMonthlyRevenue=' + totalMonthlyRevenue);

        if (revenueValueDisplay) revenueValueDisplay.textContent = '$' + revenuePerLocation.toLocaleString();
        if (locationsValueDisplay) locationsValueDisplay.textContent = String(numberOfLocations);
        if (totalRevenueValueDisplay) totalRevenueValueDisplay.textContent = '$' + totalMonthlyRevenue.toLocaleString();

        // Location limit logic for Starter Plan
        // pricingData is assumed to be in scope (e.g., from define:vars)
        const maxStarterLocations = pricingData.plan1.maxLocations;
        let starterCostsDisabled = false;

        if (numberOfLocations > maxStarterLocations) {
            starterCostsDisabled = true;
            starterPlanCardElement.classList.add('opacity-50', 'pointer-events-none'); // Add suitable CSS classes for disabling
            starterPlanLimitMessageElement.textContent = `Starter plan is available for up to ${maxStarterLocations} locations.`;
            starterPlanLimitMessageElement.style.display = 'block'; // Or manage via CSS classes

            // Display N/A or clear Starter plan costs
            if (starterOkraFeeDisplay) starterOkraFeeDisplay.textContent = 'N/A';
            if (starterPaymentFeeDisplay) starterPaymentFeeDisplay.textContent = 'N/A';
            if (starterTotalCostDisplay) starterTotalCostDisplay.textContent = 'N/A';
        } else {
            starterPlanCardElement.classList.remove('opacity-50', 'pointer-events-none');
            starterPlanLimitMessageElement.textContent = '';
            starterPlanLimitMessageElement.style.display = 'none';
        }

        const costs = calculateCosts(totalMonthlyRevenue, numberOfLocations); // Use totalMonthlyRevenue for calculation
        console.log("costs object in updateDisplay:", costs);

        if (!starterCostsDisabled) {
            if (starterOkraFeeDisplay) starterOkraFeeDisplay.textContent = '$' + costs.starter.okraFee.toFixed(2);
            if (starterPaymentFeeDisplay) starterPaymentFeeDisplay.textContent = '$' + costs.starter.paymentProcessingFee.toFixed(2);
            if (starterTotalCostDisplay) starterTotalCostDisplay.textContent = '$' + costs.starter.totalCost.toFixed(2);
        }
        // Pro plan costs are updated regardless
        if (proOkraFeeDisplay) proOkraFeeDisplay.textContent = '$' + costs.pro.okraFee.toFixed(2);
        if (proPaymentFeeDisplay) proPaymentFeeDisplay.textContent = '$' + costs.pro.paymentProcessingFee.toFixed(2);
        if (proTotalCostDisplay) proTotalCostDisplay.textContent = '$' + costs.pro.totalCost.toFixed(2);
        console.log("Display updated.");
      }

      if (revenueSlider && locationsSlider) {
        console.log("Attaching event listeners and running initial updateDisplay.");
        revenueSlider.addEventListener('input', updateDisplay);
        locationsSlider.addEventListener('input', updateDisplay);

        // Update disclaimer text once on load
        if (disclaimerPlatformFeeText && localStarterPlatformFeeDisplayText) {
            disclaimerPlatformFeeText.textContent = localStarterPlatformFeeDisplayText;
        } else if (disclaimerPlatformFeeText) { // if the element exists but text doesn't, set a default
            disclaimerPlatformFeeText.textContent = "3%"; // Default if not passed by define:vars
            console.warn("starterPlatformFeeDisplayTextPassed not found, disclaimer set to default '3%'");
        }


        updateDisplay(); // Initial calculation for costs
      } else {
        console.error("Calculator sliders not found, cannot attach event listeners or run initial calculation.");
      }
    });
  </script>
</MainLayout>
