---
description: 
globs: 
alwaysApply: true
---
Features
Astro-Powered: Utilize a modern static-site generation framework.
Tailwind CSS: Enjoy rapid UI development with a utility-first CSS framework.
Preline UI: Implement prebuilt UI components for added elegance.
GSAP Integration: Impress with professional and polished animations.
Markdown Content Collections: Organize and manage your content seamlessly.
Internationalization (i18n): Integrates Astro's internationalization features.
SEO and Responsiveness: Ensure your site is discoverable and accessible on any device.

Icon Set Component:

Centralizes SVG icons for easy management and updates.
Render any pre-defined icon SVG using <Icon name="iconName" /> in your Astro components.
Note: Developers have the option to use other community integrations like astro-icons (`astro-icon` is currently used).

Project Structure
ScrewFast organizes modular components, content, and layouts to streamline development and content management.

src/
├── assets/               
│   ├── scripts/          # JS scripts
│   └── styles/           # CSS styles
├── components/           # Reusable components
│   ├── Meta.astro        # Meta component for SEO
│   ├── sections/         # Components for various sections of the website
│   ├── ThemeIcon.astro   # Component for toggling light/dark themes
│   └── ui/               # UI components categorized by functionality
├── content/              # Markdown files for insights, products, and site configuration
│   ├── insights/         
│   └── products/         
├── data_files/           # Strings stored as JSON files
├── images/               # Static image assets used by Astro's Image component
├── layouts/              # Components defining layout templates
│   └── MainLayout.astro  # The main wrapping layout for all pages
├── pages/                # Astro files representing individual pages and website sections
│   ├── 404.astro         # Custom 404 page
│   ├── contact.astro     
│   ├── index.astro       # The landing/home page
│   ├── insights/         
│   ├── products/         
│   ├── robots.txt.ts     # Dynamically generates robots.txt
│   ├── services.astro    # Example - update as needed
│   └── why-okra.astro    # Example - update as needed
├── utils/                # Shared utility functions and helpers
└── content.config.ts     # Contains content collections configuration options

Static Assets and Public Resources
Static files served directly to the browser are within the public directory at the root of the project.

public/
└── okra-logo.png # Example: Logo moved here
    
Customization
ScrewFast allows for easy customization to suit your specific needs. Here are a couple of ways you can configure components and content:

Editing Component Variables
Some components have properties defined as TypeScript variables within the component file. Here's an example of customizing the FeaturesGeneral component:

// Define the string variables title and subTitle for the main heading and sub-heading text.
const title: string = "Meeting Industry Demands";
const subTitle: string =
  "At ScrewFast, we tackle the unique challenges encountered in the hardware and construction sectors.";
For collections of content like testimonials or statistics, edit the corresponding array of objects:

// An array of testimonials
const testimonials: Testimonial[] = [...];

// An array of statistics
const statistics: StatProps[] = [...];
Modify the content within these arrays to reflect your data.

Props in Component Instances
You can pass values to props directly in the page files for components used across pages. Here's an example of a HeroSection and ClientsSection component with inline props:

<HeroSection
  subTitle="Top-quality hardware tools and expert construction services for every project need."
  primaryBtn="Start Exploring"
  primaryBtnURL="/explore"
/>

<ClientsSection
  title="Trusted by Industry Leaders"
  subTitle="Experience the reliability chosen by industry giants."
/>
Edit the props such as title, subTitle, primaryBtn, etc., to personalize these sections. Ensure that you maintain the structure and data types of the props.

**Component Syntax Note:** Ensure comments (`{/* ... */}`) are placed *outside* component tags (e.g., after `>` or `/>`), not between attributes, to avoid build errors. Placing comments *inside* the opening tag (between `<Component` and `>`) can break the Astro/JSX parser and lead to errors like `Unterminated string literal` or type errors where the comment is misinterpreted as a prop.

**Valid Comment Placement:**
```astro
{/* Comment before component */}
<MyComponent prop1="value" />

<MyComponent prop2={data} /> {/* Comment after component */}

<MyComponent>
  {/* Comment inside component body */}
  <p>Some content</p>
</MyComponent>

<!-- Standard HTML comments are also usable outside components -->
```

**Invalid Comment Placement:**
```astro
{/* These examples will likely cause build errors */}
<MyComponent {/* BAD */} prop1="value" /> 
<MyComponent prop1="value" {/* BAD */} prop2={data} /> 
<MyComponent prop1="value" {/* BAD */}>
  <p>Content</p>
</MyComponent> 
```

**General Commenting:** While comments can be helpful, avoid adding comments that merely state the obvious (e.g., commenting every prop being passed). Focus comments on explaining complex logic, potential pitfalls, or areas needing future attention.

Customizing Navigation and Footer Links
Edit the `navigation.ts` file within the `utils` directory to manage navigation bar and footer links:

Navigation Bar Links
Edit the `navBarLinks` array to adjust navigation bar links:

// An array of links for the navigation bar
export const navBarLinks: NavLinkItem[] = [
  {
    name: "Features",
    url: "#", 
    subLinks: [ /* ... feature links ... */ ],
  },
  { name: "Why Okra?", url: "/why-okra/" },
  { name: "Pricing", url: "/pricing/" },
  { name: "Support", url: "/support/" },
];
Replace name with the display text and url with the appropriate path to pages on your site.

Footer Links
Similarly, adjust the links displayed in the footer by editing the `footerLinks` array:

// An array of links for the footer
export const footerLinks = [
  {
    section: "Product",
    links: [ /* ... product links ... */ ],
  },
  {
    section: "Company",
    links: [
      { name: "Contact Us", url: "/contact" },
      // Removed Blog link
    ],
  },
   {
    section: "Support & Legal",
    links: [ /* ... support links ... */ ],
  },
];
Each section within the `footerLinks` array represents a group of links. Update the `section` value for the group heading and modify each link's `name` and `url` as needed.

Social Media Links
Replace the placeholder URLs in the socialLinks object with your social media profiles:

// An object of links for social icons
export const socialLinks: SocialLinks = {
  facebook: "#",
  twitter: "#",
  github: "#",
  linkedin: "#",
  instagram: "#",
};
Note

Remember to add complete and valid URLs for the navigation to function properly. These customizations will reflect throughout your Astro site, promoting consistency across all pages.

Additional Components
We have two options for the navigation bar components: Navbar.astro for a regular navbar and NavbarMegaMenu.astro for a mega menu. Both are located in src/components/sections/navbar&footer.

The Navbar.astro and NavbarMegaMenu.astro components can be configured within MainLayout.astro, allowing you to choose the style of navigation that best suits your project. To customize these components, you can modify them directly under src/components/sections/navbar&footer to apply specific configurations or design updates.

ScrewFast MegaMenu

Integrations and Enhancements

Lenis for Smooth Scrolling
Experience buttery smooth scrolling with Lenis. We've integrated Lenis to provide an enhanced scrolling experience that's both fluid and responsive.

Here's how we set up Lenis in src/assets/scripts/lenisSmoothScroll.js:

// src/assets/scripts/lenisSmoothScroll.js
import "@styles/lenis.css";

import Lenis from "lenis";

const lenis = new Lenis();

function raf(time) {
    lenis.raf(time);
    requestAnimationFrame(raf);
}

requestAnimationFrame(raf);
And then add it to MainLayout.astro:

<script>
  import "@scripts/lenisSmoothScroll.js";
</script>
Please note that smooth scrolling can affect accessibility and performance on some devices, so be sure to test it comprehensively across different environments.

Note: Since Starlight was removed, you only need to worry about commenting out Lenis in `MainLayout.astro` if desired.

GSAP Integration
For individual product pages, GSAP has been integrated to add engaging animations that execute as soon as the product page loads. You can find and modify the GSAP configuration in the script sections of the product page file located at src/pages/products/[id].astro and the insights page at src/pages/insights/[id].astro:

<script>
  import { gsap } from "gsap";
  // Initialize GSAP animations...
</script>
Customizing Animations:

Please tailor the GSAP animations within this script to fit your project's look and feel. The provided example is a starting point, representing how to leverage GSAP for immediate visual impact as a product page loads.

Modifying or Removing Animations:

To modify an animation, update the properties and parameters within the gsap.from() method, or add new GSAP animation calls as required.
Should GSAP not be needed, or if you prefer a different animation method, simply remove the aforementioned script segment.
Note

We've chosen to keep the integration lean and focused, but GSAP's comprehensive documentation can be referred to for more complex animations: GSAP Documentation.

Hiding Scrollbar
To achieve a cleaner and more spacious design, the default scrollbar has been visually removed. While this choice fits the aesthetic goals of the project, it's important to consider that hiding scrollbars can sometimes affect accessibility and user experience. We recommend evaluating this design decision within the context of your user base and their needs.

For those who prefer custom-styled scrollbars, we suggest using the tailwind-scrollbar plugin, which adds Tailwind CSS utilities for scrollbar styles, allowing for more controlled customization that can also meet accessibility standards.

Note

If you wish to return the default scrollbar, you can comment out or remove the following CSS from src/layouts/MainLayout.astro:

<style>
.scrollbar-hide::-webkit-scrollbar {
  display: none;
}
.scrollbar-hide {
  -ms-overflow-style: none;
  scrollbar-width: none;
}
</style>
Additionally, update the <html> tag to remove the scrollbar-hide class, resulting in:

<html lang="en" class="scroll-pt-16">
SEO Configuration
The SEO Configuration in the ScrewFast template is designed to empower users in optimizing their website's visibility on search engines and social media platforms. This documentation outlines the implementation details and usage instructions for effectively managing SEO settings.

Using constants.ts
The SEO configuration has been centralized using the constants.ts file. This file manages SEO-related data such as page titles, descriptions, structured data, and Open Graph tags, providing a more structured and manageable approach to SEO management.

To customize SEO settings, modify the values in the constants.ts file. Key configurations include SITE, SEO, and OG, allowing developers to define site-wide SEO parameters.

// constants.ts

export const SITE = {
  title: "ScrewFast",
  // Other SITE properties...
};

export const SEO = {
  title: SITE.title,
  // Other SEO properties...
};

export const OG = {
  title: `${SITE.title}: Hardware Tools & Construction Services`,
  // Other OG properties...
};
Applying Metadata in Layouts
When applying metadata within your layouts, such as MainLayout.astro, you can pass the desired metadata values as props to the Meta component:

---
// In MainLayout.astro file
const { meta } = Astro.props;

interface Props {
  meta?: string;
}
---

<Meta meta={meta} />
Passing Individual Schema
For page-specific SEO overrides, developers can pass individual schema properties within specific page files.

---
import { SITE } from "@/data_files/constants";
---
<MainLayout
  title={`Example Page | ${SITE.title}`}
  structuredData={{
    "@type": "WebPage",
    // Other structured data properties...
  }}
>
  <!-- Page content -->
</MainLayout>
With this setup, the Meta component receives the custom meta description and applies it to the page's metadata. If no custom value is passed, the default from Meta.astro will be used instead.

Extending Metadata for SEO
For a more robust SEO strategy, you can create additional properties in the Meta.astro component. For instance, you may want to include specific Open Graph tags for article publishing dates or tags for Twitter-specific metadata.

Structured Data and Rich Snippets
Structured data in JSON-LD format can be managed by the Meta.astro component, improving how search engines understand your page content and potentially enhancing search results with rich snippets. Modify the structuredData property with relevant schema.org types and properties:

<MainLayout
  structuredData={{
    "@context": "https://schema.org",
    "@type": "WebSite",
    "name": "ScrewFast",
    "url": "https://screwfast.uk",
    "description": "Discover top-quality hardware tools and services"
  }}
>
Using Astro SEO Integrations
While the template provides a custom SEO solution, you may choose to utilize an Astro integration such as Astro SEO for additional SEO features and optimizations. Integrating such a package might provide more automated metadata management and additional SEO-focused functionality.

Robots.txt
robots.txt is dynamically generated using the code found in src/pages/robots.txt.ts. This configuration follows the example from the Astro Docs:

import type { APIRoute } from 'astro';

const robotsTxt = `
User-agent: *
Allow: /

Sitemap: ${new URL('sitemap-index.xml', import.meta.env.SITE).href}
`.trim();

export const GET: APIRoute = () => {
  return new Response(robotsTxt, {
    headers: {
      'Content-Type': 'text/plain; charset=utf-8',
    },
  });
};
Markdown/MDX
Image Handling
*   **Astro `<Image>` Component (within `src/images/`):** Astro's built-in component optimizes images placed in `src/images/`. It generates multiple formats (like WebP) and handles build processing.
    *   **Troubleshooting:** If builds fail or specific formats (like WebP) don't generate correctly for an image using `<Image>`, you can try forcing a specific format (`<Image src={...} format="png" />`).
*   **Static Images (within `public/`):** For simple images that don't need optimization or if Astro's `<Image>` component causes issues, place the image directly in the `public/` directory (e.g., `public/my-image.png`) and use a standard `<img>` tag: `<img src="/my-image.png" alt="...">`. This bypasses Astro's processing.
*   **Markdown Image Integration:** The `.vscode/settings.json` setup for pasting images into Markdown might need review if `<Image>` component usage is reduced. Standard Markdown image syntax (`![alt](mdc:path/to/image.png)`) referencing images in `/public` is often simpler.

Astro Integrations
Maximize your website's efficiency with these built-in Astro integrations:

*   **Astro Compressor:** Automatically compresses Astro-generated site using gzip or brotli, ensuring faster load times.
*   **Astro Sitemap:** Automatically generates a sitemap.xml file.
*   **astro-icon:** Used for rendering SVG icons (e.g., `<Icon name="heroicons:check-circle" />`). Configure included sets in `astro.config.mjs`.
*   **MDX:** Enables using components within Markdown files.

Flexibility with Integrations
The great thing about Astro is its rich ecosystem of integrations, allowing you to tailor project functionalities to your exact needs. Feel free to explore Astro integrations page and add additional capabilities as you see fit.

Tools and Technologies
This project is built using a variety of tools and technologies that enhance its performance, maintainability, and developer experience. Below is a list of the key tools and their roles in the project:

Preline UI
Interactive components like navbars, modals, and accordions are built using Preline UI, a comprehensive open-source component library.

Tailwind CSS
Styling across our project leverages the utility-first classes offered by Tailwind CSS. This methodology allows us to create custom layouts and components with speed and efficiency.

To ensure consistent code formatting, particularly for class sorting, we have integrated the prettier-plugin-tailwindcss plugin. The following configuration is set in the .prettierrc file at the root of the project:

{
  "plugins": ["prettier-plugin-tailwindcss"]
}
Deployment and Security
We deploy our project on Vercel, capitalizing on their robust platform for seamless CI/CD workflows. Using vercel.json, we set stringent security headers and caching policies, ensuring adherence to security and performance best practices:

{
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "Content-Security-Policy",
          "value": "default-src 'self'; [other-directives]"
        },
        "Additional security headers..."
      ]
    }
  ]
}
HTML Minification
For optimal site performance, we post-process our HTML files with process-html.mjs, a custom script that minifies HTML after the build phase to reduce file size and improve load times.

Here is a snippet from our HTML minification script in process-html.mjs:

/process-html.mjs
// Post-build HTML minification script snippet
// ...
await Promise.all(
  files.map(async (file) => {
    // File processing and minification logic
  })
);

---
**Troubleshooting Build Issues**

Here's a summary of common issues encountered during development and how to address them:

*   **Silent Build Failures (e.g., Missing `index.html`):**
    *   **Symptom:** `npm run build` finishes without apparent errors, but essential pages (like the homepage `index.html`) are missing from the `dist` directory, leading to 404s in preview/deployment.
    *   **Cause:** Often due to a runtime error within a specific component or its data fetching/processing on the unbuilt page. Astro might not surface these errors clearly during the static build phase.
    *   **Solution:** Systematically comment out sections or components within the problematic `.astro` page file (e.g., starting from the bottom), running `npm run build` after each change. When `dist/index.html` (or the relevant page) is successfully generated, the last commented-out section contains the issue. Debug that component or its data.

*   **Component Syntax Errors (Comments):**
    *   **Symptom:** Build errors like `Unterminated string literal`, `Expected corresponding JSX closing tag`, or type errors mentioning boolean props (`Pass`, `imported`) that don't exist.
    *   **Cause:** Placing comments (`{/* ... */}`) *inside* component tags, between attributes, instead of outside the tag.
    *   **Solution:** Ensure comments are placed outside the component's opening/closing tags (`<Component ... /> {/* Comment here */}` or `<Component> {/* Comment here */}</Component>`).

*   **Astro `<Image>` Component Failures:**
    *   **Symptom:** 404 errors for specific image formats (often `.webp`) even though the source image exists, or build failures related to image processing.
    *   **Cause:** Issues with the underlying image library (Sharp/libvips) failing to process a specific image or format. Cache inconsistencies.
    *   **Solutions:**
        1.  **Force Format:** Try forcing a known-good format: `<Image src={importedImage} format="png" />`.
        2.  **Use `/public`:** Move the image to the `public/` directory (e.g., `public/my-image.png`) and use a standard `<img>` tag: `<img src="/my-image.png" alt="...">`. This bypasses Astro's processing.
        3.  **Clean Build:** Run `rm -rf dist node_modules && npm install && npm run build`.

*   **Integration / Virtual Module Errors:**
    *   **Symptom:** Build errors mentioning failure to resolve `virtual:` modules (e.g., `virtual:astro-expressive-code/config`).
    *   **Cause:** An Astro integration is either missing, misconfigured in `astro.config.mjs`, or conflicting with another part of the build.
    *   **Solution:** Verify the integration is installed. Ensure it's correctly added and configured within the `integrations` array in `astro.config.mjs`. If the integration was removed (like Starlight), ensure all references (imports, config usage) are also removed, including in `content.config.ts`. A clean build can also help.

*   **Content Collection Type Errors:**
    *   **Symptom:** TypeScript errors like `Property 'data' does not exist on type 'never'` or `Type '"blog"' does not satisfy the constraint 'keyof DataEntryMap'` after modifying `content.config.ts`.
    *   **Cause:** A content collection (e.g., `blog`) was removed or commented out in `content.config.ts`, but components or pages still try to import or query data using that collection type (`CollectionEntry<"blog">`).
    *   **Solution:** Delete or comment out all pages (`src/pages/...`) and components (`src/components/...`) that reference the removed collection type.

-----